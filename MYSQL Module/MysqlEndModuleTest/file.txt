1.Write an SQL query to retrieve all employees' names and salaries from a table named
`Employees`, ordered by salary in descending order.
Answer:
SELECT Name, Salary
FROM Employees
ORDER BY Salary DESC;

2.Retrieve the top 5 highest-paid employees from the `Employees` table.
Answer:
SELECT Name, Salary
FROM Employees
ORDER BY Salary DESC
LIMIT 5;

3.Fetch employee records from the `Employees` table, skipping the first 3 records and showing the next 5 records
Answer:
SELECT *
FROM Employees
ORDER BY EmployeeID
LIMIT 5 OFFSET 3;

4.Write a query to count the number of employees in each department from the `Employees` table.
Answer:
SELECT Department, COUNT(*) AS EmployeeCount
FROM Employees
GROUP BY Department;

5.Fetch the department-wise average salary from the `Employees` table, only for departments where the average salary is greater than 50,000.
Answer:
SELECT Department, AVG(Salary) AS AvgSalary
FROM Employees
GROUP BY Department
HAVING AVG(Salary) > 50000;

6.Retrieve a list of products from the `Products` table where the product name contains the word "Laptop" 
Answer:
SELECT *
FROM Products
WHERE ProductName LIKE '%Laptop%';

7.Extract the first three characters from the `student_name` column in the `Students` table.
Answer:
SELECT SUBSTRING(student_name, 1, 3) AS FirstThreeChars
FROM Students;

8.Fetch only those students from the `Students` table whose names start with the letter "A".
SELECT *
FROM Students
WHERE student_name LIKE 'A%';

9.Write an SQL query to find the total number of orders placed in each month, considering only those months where more than 100 orders were placed.
SELECT 
    MONTH(OrderDate) AS OrderMonth,
    YEAR(OrderDate) AS OrderYear,
    COUNT(*) AS TotalOrders
FROM Orders
GROUP BY YEAR(OrderDate), MONTH(OrderDate)
HAVING COUNT(*) > 100
ORDER BY OrderYear, OrderMonth;

10.Get the total and average sales amount per category from the `Sales` table, considering only categories with total sales greater than 1,00,000.
SELECT 
    Category,
    SUM(SalesAmount) AS TotalSales,
    AVG(SalesAmount) AS AvgSales
FROM Sales
GROUP BY Category
HAVING SUM(SalesAmount) > 100000
ORDER BY TotalSales DESC;

11.What does the following query return?
SELECT COUNT(*) FROM Employees;
Answer:a)The total number of employees

12.What will be the output of the following query?
SELECT LENGTH('Database');
Answer:b)8

13.Which of the following clauses is used to filter grouped results?
Answer:
c)HAVING

14.What does `LEFT JOIN` do?
Answer:b)Returns all rows from the left table and matching rows from the right table

15.What will be the result of the following query?
SELECT UPPER('hello world');
Answer:b)HELLO WORLD

16.Question:
You have two tables:

•	Orders with columns: order_id, customer_id, order_date, total_amount.
•	Customers with columns: customer_id, region.
•	O/P- region | total_orders

Write an SQL query to find the total order amount (total_amount) for each region. Only include regions where the total order amount is greater than 10000
Answer:
SELECT 
    c.region, 
    SUM(o.total_amount) AS total_orders
FROM 
    Orders o
JOIN 
    Customers c
ON 
    o.customer_id = c.customer_id
GROUP BY 
    c.region
HAVING 
    SUM(o.total_amount) > 10000;

17.Question:
You have two tables:

•	Books with columns: book_id, author_id, title, price.
•	Sales with columns: sale_id, book_id, sale_date, quantity.
•	O/P- author_id | total_books_sold

Write an SQL query to find the total number of books sold by each author. Only include authors who have sold more than 100 books.
Answer:
SELECT 
    b.author_id, 
    SUM(s.quantity) AS total_books_sold
FROM 
    Books b
JOIN 
    Sales s
ON 
    b.book_id = s.book_id
GROUP BY 
    b.author_id
HAVING 
    SUM(s.quantity) > 100;








